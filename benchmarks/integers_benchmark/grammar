(if|else|elif|while)(?![\w\d_]) (?P<COMMA>\,) (?P<DOT>\.) (?P<LPAREN>\() (?P<NUM>[+\-]?\d+) (?P<ASSOP>[+\-*/]=) (?P<MULTDIV>[*/]) (?P<PLUSMINUS>[+\-])  : (?P<RPAREN>\)) (?P<LSPAREN>\[) (?P<RSPAREN>\]) (?P<NOT>not) (?P<FALSE>False) (?P<TRUE>True) (?P<LEN>len) (?P<INV>__inv__) (?P<REVERSE>reverse) (?P<APPEND>append) (?P<REMOVE>remove) (?P<MAX>max) (?P<INDEX>index) (?P<RELOP>[!<>=]=|([<>])) (?P<AND>and) (?P<OR>or) (?P<ID>[^\W\d]\w*) (?P<NEWLINE>[\r\n(\r\n)]+) (?P<INDENT5>(\t\t\t\t\t)) (?P<INDENT4>(\t\t\t\t)) (?P<INDENT3>(\t\t\t)) (?P<INDENT2>(\t\t)) (?P<INDENT>(\t))  =
GRAMMAR 
S   ->   S1 | S1 NEWLINE | S1 NEWLINE INDENT   |  E  |  S1 NEWLINE S


S1  ->   ID = E   | IF_S5 |  IF_S4 | IF_S3 | IF_S2 | IF_S  | WHILE_S5 | WHILE_S4 | WHILE_S3 | WHILE_S2 | WHILE_S  |     ID ASSOP E   |   DEREF = E   |   INV_FUNC | FUNCS
S1  ->   LPAREN S RPAREN

IF_S -> if E : BLOCK | if E : BLOCK NEWLINE ELSE_S | if E : BLOCK NEWLINE ELIF_S
IF_S2 -> if E : BLOCK2 | if E : BLOCK2 NEWLINE INDENT ELSE_S2 | if E : BLOCK2 NEWLINE INDENT ELIF_S2 
IF_S3 -> if E : BLOCK3 | if E : BLOCK3 NEWLINE INDENT2 ELSE_S3 | if E : BLOCK3 NEWLINE INDENT2 ELIF_S3
IF_S4 -> if E : BLOCK4 | if E : BLOCK4 NEWLINE INDENT3 ELSE_S4 | if E : BLOCK4 NEWLINE INDENT3 ELIF_S4
IF_S5 -> if E : BLOCK5 | if E : BLOCK5 NEWLINE INDENT4 ELSE_S5 | if E : BLOCK5 NEWLINE INDENT4 ELIF_S5

ELIF_S -> elif E : BLOCK | elif E : BLOCK NEWLINE ELSE_S | elif E : BLOCK NEWLINE ELIF_S
ELIF_S2 -> elif E : BLOCK2 | elif E : BLOCK2 NEWLINE INDENT ELSE_S2 | elif E : BLOCK2 NEWLINE INDENT ELIF_S2
ELIF_S3 -> elif E : BLOCK3 | elif E : BLOCK3 NEWLINE INDENT2 ELSE_S3 | elif E : BLOCK3 NEWLINE INDENT2 ELIF_S3
ELIF_S4 -> elif E : BLOCK4 | elif E : BLOCK4 NEWLINE INDENT3 ELSE_S4 | elif E : BLOCK4 NEWLINE INDENT3 ELIF_S4
ELIF_S5 -> elif E : BLOCK5 | elif E : BLOCK5 NEWLINE INDENT4 ELSE_S5 | elif E : BLOCK5 NEWLINE INDENT4 ELIF_S5
  
ELSE_S -> else : BLOCK
ELSE_S2 -> else : BLOCK2
ELSE_S3 -> else : BLOCK3
ELSE_S4 -> else : BLOCK4
ELSE_S5 -> else : BLOCK5

WHILE_S -> while E : BLOCK
WHILE_S2 -> while E : BLOCK2
WHILE_S3 -> while E : BLOCK3
WHILE_S4 -> while E : BLOCK4
WHILE_S5 -> while E : BLOCK5

BLOCK ->  NEWLINE INDENT S1 | NEWLINE INDENT S1 BLOCK
BLOCK2 ->  NEWLINE INDENT2 S1 | NEWLINE INDENT2 S1 BLOCK2
BLOCK3 ->  NEWLINE INDENT3 S1 | NEWLINE INDENT3 S1 BLOCK3
BLOCK4 ->  NEWLINE INDENT4 S1 | NEWLINE INDENT4 S1 BLOCK4
BLOCK5 ->  NEWLINE INDENT5 S1 | NEWLINE INDENT5 S1 BLOCK5

E   ->   LPAREN E RPAREN | UN_REL E  |    E MULTDIV E   |   E PLUSMINUS E   | E RELOP E
E   ->   E BI_REL E | LIST_E | DEREF | FUNCS
E   ->   E0
FUNCS -> LEN_FUNC | REVERSE_FUNC | APPEND_FUNC | REMOVE_FUNC | MAX_FUNC | INDEX_FUNC
LEN_FUNC   -> LEN LPAREN E RPAREN
INV_FUNC   -> INV LPAREN INV_ARGS RPAREN
REVERSE_FUNC -> REVERSE CALL
APPEND_FUNC -> APPEND CALL
REMOVE_FUNC -> REMOVE CALL
MAX_FUNC -> MAX CALL
INDEX_FUNC -> INDEX CALL
E0  ->   ID   |   NUM  | BOOL
BOOL -> TRUE | FALSE

BI_REL -> AND | OR
UN_REL -> NOT
CALL   -> LPAREN FUNC_ARGS RPAREN | LPAREN RPAREN
LIST_E -> LSPAREN LIST_ITEMS RSPAREN | LSPAREN RSPAREN
LIST_ITEMS -> E | E COMMA LIST_ITEMS
FUNC_ARGS  -> LIST_ITEMS
DEREF  -> ID LSPAREN E RSPAREN
INV_ARGS -> ASSIGN | ASSIGN COMMA INV_ARGS
ASSIGN -> ID = E
VAR -> x | y | z | i | w | n | myList | count | num | limiter